(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (car (cdr (cdr tree))))
(define (make-tree entry left right)
  (list entry left right))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) #t)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

(define (key x) x)

(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) #f)
        ((equal? given-key (key (car set-of-records)))
         (car set-of-records))
        (else (lookup given-key (cdr set-of-records)))))

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (entry set)) #t)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

;; (element-of-set? 5 3 (list 1 () (list 2 () ())) (list 4 () (list 4 () (list 5 () ()))))
;; (element-of-ser? 5 (list 4 () (list 5 () ()))
;; (element-of-set? 5 (list 5 () ()))
;; ((= 5 (5))) 
;; #t

(define (key x) x)

(define (lookup-tree given-key tree-of-records)
  (cond ((null? tree-of-records) #f)
        ((equal? given-key (key (entry tree-of-records)))
         (entry tree-of-records))
        ((< given-key (key (entry tree-of-records)))
         (lookup-tree given-key (left-branch tree-of-records)))
        ((> given-key (key (entry tree-of-records)))
         (lookup-tree given-key (right-branch tree-of-records)))))

(define my-tree (make-tree 10 
                           (list 6 (list 2 (list 0 '() '()) (list 4 '() '()))
                                 (list 8 (list 7 '() '()) (list 9 '() '())))
                           (list 19 (list 15 (list 13 '() '()) (list 17 '() '()))
                                 (list 24 (list 22 '() '()) (list 27 '() '())))))


;; (display my-tree)
(lookup-tree 14 my-tree)
;; (display (right-branch my-tree))
